#!/usr/bin/env ruby

require 'commander/import'

require 'git-merge'

program :name, 'git-merge'
program :version, GitMerge::VERSION.to_s
program :description, 'A helper tool to easily block particular GIT commits during the merge'

global_option('-d', '--debug') { GitMerge::Logger.level = Logger::DEBUG }

command :block do |c|
  c.syntax = 'git-merge block [options] <commit> [<commit>...]'
  c.description = 'Blocks particular commits'
  c.option '-b', '--branch BRANCH', String, 'Branch in which block commits [HEAD by default]'
  c.option '-r', '--repo PATH', String, 'Path to the GIT repository [CWD by default]'
  c.action do |args, options|
    options.default branch: nil, repo: Dir.getwd
    hashes = args

    repo = GitMerge::Repo.new options.repo
    block = GitMerge::Block.new repo, branch: options.branch
    begin
      block.block! hashes
    rescue GitMerge::GitMergeError
      exit
    end
  end
end

command :merge do |c|
  c.syntax = 'git-merge merge [options] <head>'
  c.description = 'Merge head excluding blocked commits'
  c.option '-b', '--branch BRANCH', String, 'Branch into which perform the merge [HEAD by default]'
  c.option '-r', '--repo PATH', String, 'Path to the GIT repository [CWD by default]'
  c.action do |args, options|
    options.default branch: nil, repo: Dir.getwd
    from = args.first

    repo = GitMerge::Repo.new options.repo
    merge = GitMerge::Merge.new repo, branch: options.branch
    begin
      merge.merge! from
    rescue GitMerge::GitMergeError
      exit
    end
  end
end
